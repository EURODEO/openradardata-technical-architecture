
@startuml "c4-container-diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml


!define osaPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-opensecurityarchitecture2-icons/master
!include osaPuml/Common.puml
!include osaPuml/User/all.puml

!include <office/Servers/database_server>
!include <office/Concepts/folder>

'LAYOUT_TOP_DOWN()
LAYOUT_LEFT_RIGHT()

AddContainerTag("db", $sprite="database_server", $legendText="database container")
AddContainerTag("File", $sprite="folder", $legendText="File")

SystemDb_Ext(opera_radardb, "OPERA RadarDb", "OPERA radar metadata DB")

SystemQueue_Ext(opera_in,"OPERA Composite", "OPERA Composite")
SystemQueue_Ext(odim_in,"National ODIM", "NMHS Observation in ODIM format")

System_Boundary(opera_system, "EURODEO Open Radar Data"){
        System_Boundary(local_oscar, "Local Radar Metadata", "?", "Descr"){
            Container(radar_metadb, "Radar Metadata","CSV file",$tags=File)
            Container(meta_upd, "Metadata Updater","weekly update")
        }

        System_Boundary(db,"European Weather Cloud"){
            System_Boundary(ingest,"Ingestion"){
                Container(ingest_api, "Open Radar Data Ingest API", "", "Handles incoming data, and sending to the message generator.")
                Container(msg_gen, "Message generator", "", "-Extract, encode incoming data\n -Meta data from local RadarDb\n-make notification message")
                ContainerQueue(mqtt, "Notification Service", "MQTT broker", "MQTT Event Queue. WIS2 real-time data sharing by a publication/subscription (PubSub) mechanism based on the Message Queuing Telemetry Transport Protocol.")
            }
            System_Boundary(store,"Store"){
                ContainerDb(db_store, "Data and Metadata Store", "Metadata and indexing.",$tags="db")
                ContainerDb(s3_store, "S3 Bucket File Store", "S3 Bucket of XX days of files.",$tags="File")
                ContainerQueue(odata_api, "Open Radar Data API", "API", "User: request, response: S3 Link ")
            }
            System_Boundary(log,"Logging, Monitoring"){
                Container(lmar, "Logging, monitoring, alerting and reporting", "")
            }
        }    
}

Person_Ext(user1,"Customer 1", "Needs: OPERA Composite")
Person_Ext(user2,"User 2", "Needs: National ODIM")
System_Ext(user3,"AI", "Needs: Nationonal ODIM")

Rel(odim_in,ingest_api,"File")
Rel(opera_in,ingest_api,"File")

Rel(msg_gen, db_store, "json")
Rel(msg_gen, mqtt,"MQTT")
Rel(msg_gen, s3_store, "File")
Rel(radar_metadb, msg_gen, "Metadata")

Rel(ingest_api, msg_gen, "File")
Rel(db_store, odata_api,"S3 link")

Rel(meta_upd, radar_metadb, "")
Rel_L(opera_radardb, meta_upd, "")

Rel(ingest,lmar,"")
Rel(store,lmar,"")

Rel(odata_api,user1,"S3 link")
Rel(odata_api,user2,"S3 link")
Rel(odata_api,user3,"S3 link")

Rel(s3_store,user1,"File")
Rel(s3_store,user2,"File")
Rel(s3_store,user3,"File")

'Rel(mqtt,subscriber,"MQTT")
'Rel(mqtt,user1,"MQTT")
Rel(mqtt,user2,"MQTT")
'Rel(mqtt,user3,"MQTT")


@enduml


